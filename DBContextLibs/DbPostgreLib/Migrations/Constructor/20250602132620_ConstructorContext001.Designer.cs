// <auto-generated />
using System;
using DbcLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DbPostgreLib.Migrations.Constructor
{
    [DbContext(typeof(ConstructorContext))]
    [Migration("20250602132620_ConstructorContext001")]
    partial class ConstructorContext001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharedLib.BaseFieldModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenUniqueRoute")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TokenUniqueRoute")
                        .IsUnique();

                    b.HasIndex("OwnerId", "SortIndex")
                        .IsUnique();

                    b.ToTable("FieldsSnapshots");

                    b.HasDiscriminator().HasValue("BaseFieldModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SharedLib.DirectoryConstructorModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Name", "ProjectId")
                        .IsUnique();

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("SharedLib.DirectoryEnumElementSnapshotModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenUniqueRoute")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TokenUniqueRoute")
                        .IsUnique();

                    b.ToTable("ElementsOfDirectoriesSnapshots");
                });

            modelBuilder.Entity("SharedLib.DirectoryEnumSnapshotModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenUniqueRoute")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TokenUniqueRoute")
                        .IsUnique();

                    b.ToTable("DirectoriesSnapshots");
                });

            modelBuilder.Entity("SharedLib.DirectoryOuterLinkModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DirectoryId")
                        .HasColumnType("integer");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DirectoriesOuterJoins");
                });

            modelBuilder.Entity("SharedLib.DocumentOuterLinkModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DocumentsOuterJoins");
                });

            modelBuilder.Entity("SharedLib.DocumentSchemeConstructorModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Name", "ProjectId")
                        .IsUnique();

                    b.ToTable("DocumentSchemes");
                });

            modelBuilder.Entity("SharedLib.DocumentSnapshotModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenUniqueRoute")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TokenUniqueRoute")
                        .IsUnique();

                    b.ToTable("DocumentsSnapshots");
                });

            modelBuilder.Entity("SharedLib.ElementOfDirectoryConstructorModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SortIndex");

                    b.HasIndex("Name", "ParentId")
                        .IsUnique();

                    b.ToTable("ElementsOfDirectories");
                });

            modelBuilder.Entity("SharedLib.FieldFormAkaDirectoryConstructorModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Css")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DirectoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Hint")
                        .HasColumnType("text");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Required");

                    b.HasIndex("SortIndex");

                    b.ToTable("LinksDirectoriesToForms");
                });

            modelBuilder.Entity("SharedLib.FieldFormConstructorModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Css")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Hint")
                        .HasColumnType("text");

                    b.Property<string>("MetadataValueType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<int>("TypeField")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Required");

                    b.HasIndex("SortIndex");

                    b.HasIndex("TypeField");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SharedLib.FormConstructorModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddRowButtonTitle")
                        .HasColumnType("text");

                    b.Property<string>("Css")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUpperName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedUpperName");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Name", "ProjectId")
                        .IsUnique();

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("SharedLib.FormOuterLinkModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FormsOuterJoins");
                });

            modelBuilder.Entity("SharedLib.FormSnapshotModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenUniqueRoute")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TokenUniqueRoute")
                        .IsUnique();

                    b.ToTable("FormsSnapshots");
                });

            modelBuilder.Entity("SharedLib.FormToTabJoinConstructorModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("ShowTitle")
                        .HasColumnType("boolean");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<int>("TabId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("IsTable");

                    b.HasIndex("SortIndex");

                    b.HasIndex("TabId");

                    b.ToTable("TabsJoinsForms");
                });

            modelBuilder.Entity("SharedLib.ManageManufactureModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessDataDirectoryPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlazorDirectoryPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("BlazorSplitFiles")
                        .HasColumnType("boolean");

                    b.Property<string>("DocumentsMastersDbDirectoryPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnumDirectoryPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Manufactures");
                });

            modelBuilder.Entity("SharedLib.ManufactureSystemNameModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ManufactureId")
                        .HasColumnType("integer");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.Property<int>("TypeDataId")
                        .HasColumnType("integer");

                    b.Property<string>("TypeDataName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManufactureId");

                    b.HasIndex("TypeDataName", "ManufactureId", "SystemName", "TypeDataId")
                        .IsUnique();

                    b.ToTable("SystemNamesManufactures");
                });

            modelBuilder.Entity("SharedLib.MemberOfProjectConstructorModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("MembersOfProjects");
                });

            modelBuilder.Entity("SharedLib.ProjectModelDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContextName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUpperName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SchemeLastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContextName");

                    b.HasIndex("IsDisabled");

                    b.HasIndex("Name");

                    b.HasIndex("NormalizedUpperName");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SharedLib.ProjectSnapshotModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectsSnapshots");
                });

            modelBuilder.Entity("SharedLib.ProjectUseConstructorModelDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProjectsUse");
                });

            modelBuilder.Entity("SharedLib.SessionOfDocumentDataModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeadlineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Editors")
                        .HasColumnType("text");

                    b.Property<string>("EmailsNotifications")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastDocumentUpdateActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUpperName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("SessionStatus")
                        .HasColumnType("integer");

                    b.Property<string>("SessionToken")
                        .HasColumnType("text");

                    b.Property<bool>("ShowDescriptionAsStartPage")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUser");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeadlineDate");

                    b.HasIndex("LastDocumentUpdateActivity");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SessionStatus");

                    b.HasIndex("SessionToken");

                    b.HasIndex("OwnerId", "ProjectId", "NormalizedUpperName")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SharedLib.TabOfDocumentSchemeConstructorModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Name", "OwnerId")
                        .IsUnique();

                    b.HasIndex("SortIndex", "OwnerId")
                        .IsUnique();

                    b.ToTable("TabsOfDocumentsSchemes");
                });

            modelBuilder.Entity("SharedLib.TabSnapshotModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenUniqueRoute")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TokenUniqueRoute")
                        .IsUnique();

                    b.ToTable("TabsSnapshots");
                });

            modelBuilder.Entity("SharedLib.ValueDataForSessionOfDocumentModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("JoinFormToTabId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<long>("RowNum")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JoinFormToTabId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RowNum");

                    b.ToTable("ValuesSessions");
                });

            modelBuilder.Entity("SharedLib.FieldAkaDirectorySnapshotModelDB", b =>
                {
                    b.HasBaseType("SharedLib.BaseFieldModel");

                    b.Property<int>("DirectoryId")
                        .HasColumnType("integer");

                    b.HasIndex("DirectoryId");

                    b.HasDiscriminator().HasValue("FieldAkaDirectorySnapshotModelDB");
                });

            modelBuilder.Entity("SharedLib.FieldSnapshotModelDB", b =>
                {
                    b.HasBaseType("SharedLib.BaseFieldModel");

                    b.Property<int>("TypeField")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("FieldSnapshotModelDB");
                });

            modelBuilder.Entity("SharedLib.BaseFieldModel", b =>
                {
                    b.HasOne("SharedLib.FormSnapshotModelDB", "Owner")
                        .WithMany("Fields")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.DirectoryConstructorModelDB", b =>
                {
                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany("Directories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.DirectoryEnumElementSnapshotModelDB", b =>
                {
                    b.HasOne("SharedLib.DirectoryEnumSnapshotModelDB", "Owner")
                        .WithMany("Elements")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.DirectoryEnumSnapshotModelDB", b =>
                {
                    b.HasOne("SharedLib.ProjectSnapshotModelDB", "Owner")
                        .WithMany("Directories")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.DirectoryOuterLinkModelDB", b =>
                {
                    b.HasOne("SharedLib.DirectoryConstructorModelDB", "Directory")
                        .WithMany()
                        .HasForeignKey("DirectoryId");

                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.DocumentOuterLinkModelDB", b =>
                {
                    b.HasOne("SharedLib.DocumentSchemeConstructorModelDB", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.DocumentSchemeConstructorModelDB", b =>
                {
                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.DocumentSnapshotModelDB", b =>
                {
                    b.HasOne("SharedLib.ProjectSnapshotModelDB", "Owner")
                        .WithMany("Documents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.ElementOfDirectoryConstructorModelDB", b =>
                {
                    b.HasOne("SharedLib.DirectoryConstructorModelDB", "Parent")
                        .WithMany("Elements")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SharedLib.FieldFormAkaDirectoryConstructorModelDB", b =>
                {
                    b.HasOne("SharedLib.DirectoryConstructorModelDB", "Directory")
                        .WithMany("FormsDirectoriesLinks")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.FormConstructorModelDB", "Owner")
                        .WithMany("FieldsDirectoriesLinks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.FieldFormConstructorModelDB", b =>
                {
                    b.HasOne("SharedLib.FormConstructorModelDB", "Owner")
                        .WithMany("Fields")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.FormConstructorModelDB", b =>
                {
                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany("Forms")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.FormOuterLinkModelDB", b =>
                {
                    b.HasOne("SharedLib.FormConstructorModelDB", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.FormSnapshotModelDB", b =>
                {
                    b.HasOne("SharedLib.TabSnapshotModelDB", "Owner")
                        .WithMany("Forms")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.FormToTabJoinConstructorModelDB", b =>
                {
                    b.HasOne("SharedLib.FormConstructorModelDB", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.TabOfDocumentSchemeConstructorModelDB", "Tab")
                        .WithMany("JoinsForms")
                        .HasForeignKey("TabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Tab");
                });

            modelBuilder.Entity("SharedLib.ManageManufactureModelDB", b =>
                {
                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.ManufactureSystemNameModelDB", b =>
                {
                    b.HasOne("SharedLib.ManageManufactureModelDB", "Manufacture")
                        .WithMany("SystemNames")
                        .HasForeignKey("ManufactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacture");
                });

            modelBuilder.Entity("SharedLib.MemberOfProjectConstructorModelDB", b =>
                {
                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.ProjectSnapshotModelDB", b =>
                {
                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany("SnapShots")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.ProjectUseConstructorModelDb", b =>
                {
                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.SessionOfDocumentDataModelDB", b =>
                {
                    b.HasOne("SharedLib.DocumentSchemeConstructorModelDB", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.ProjectModelDb", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharedLib.TabOfDocumentSchemeConstructorModelDB", b =>
                {
                    b.HasOne("SharedLib.DocumentSchemeConstructorModelDB", "Owner")
                        .WithMany("Tabs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.TabSnapshotModelDB", b =>
                {
                    b.HasOne("SharedLib.DocumentSnapshotModelDB", "Owner")
                        .WithMany("Tabs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.ValueDataForSessionOfDocumentModelDB", b =>
                {
                    b.HasOne("SharedLib.FormToTabJoinConstructorModelDB", "JoinFormToTab")
                        .WithMany()
                        .HasForeignKey("JoinFormToTabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.SessionOfDocumentDataModelDB", "Owner")
                        .WithMany("DataSessionValues")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JoinFormToTab");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedLib.FieldAkaDirectorySnapshotModelDB", b =>
                {
                    b.HasOne("SharedLib.DirectoryEnumSnapshotModelDB", "Directory")
                        .WithMany("Fields")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("SharedLib.DirectoryConstructorModelDB", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("FormsDirectoriesLinks");
                });

            modelBuilder.Entity("SharedLib.DirectoryEnumSnapshotModelDB", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("SharedLib.DocumentSchemeConstructorModelDB", b =>
                {
                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("SharedLib.DocumentSnapshotModelDB", b =>
                {
                    b.Navigation("Tabs");
                });

            modelBuilder.Entity("SharedLib.FormConstructorModelDB", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("FieldsDirectoriesLinks");
                });

            modelBuilder.Entity("SharedLib.FormSnapshotModelDB", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("SharedLib.ManageManufactureModelDB", b =>
                {
                    b.Navigation("SystemNames");
                });

            modelBuilder.Entity("SharedLib.ProjectModelDb", b =>
                {
                    b.Navigation("Directories");

                    b.Navigation("Documents");

                    b.Navigation("Forms");

                    b.Navigation("Members");

                    b.Navigation("SnapShots");
                });

            modelBuilder.Entity("SharedLib.ProjectSnapshotModelDB", b =>
                {
                    b.Navigation("Directories");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("SharedLib.SessionOfDocumentDataModelDB", b =>
                {
                    b.Navigation("DataSessionValues");
                });

            modelBuilder.Entity("SharedLib.TabOfDocumentSchemeConstructorModelDB", b =>
                {
                    b.Navigation("JoinsForms");
                });

            modelBuilder.Entity("SharedLib.TabSnapshotModelDB", b =>
                {
                    b.Navigation("Forms");
                });
#pragma warning restore 612, 618
        }
    }
}
