// <auto-generated />
using System;
using DbcLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DbPostgreLib.Migrations.Bank
{
    [DbContext(typeof(BankContext))]
    [Migration("20250920130226_BankContext001")]
    partial class BankContext001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharedLib.BankConnectionModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankInterface")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastChecked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BankInterface");

                    b.HasIndex("LastChecked");

                    b.ToTable("ConnectionsBanks");
                });

            modelBuilder.Entity("SharedLib.BankTransferModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("BankConnectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CustomerBankId")
                        .HasColumnType("integer");

                    b.Property<long?>("CustomerBankId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BankConnectionId");

                    b.HasIndex("CustomerBankId1");

                    b.ToTable("TransfersBanks");
                });

            modelBuilder.Entity("SharedLib.CustomerBankIdModelDB", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BankIdentifyType")
                        .HasColumnType("integer");

                    b.Property<string>("Inn")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BankIdentifyType");

                    b.HasIndex("Inn");

                    b.HasIndex("Name");

                    b.ToTable("CustomersBanksIds");
                });

            modelBuilder.Entity("SharedLib.TBankAccountModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BankBik")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BankConnectionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MainFlag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TariffCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TariffName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber");

                    b.HasIndex("AccountType");

                    b.HasIndex("ActivationDate");

                    b.HasIndex("BankBik");

                    b.HasIndex("BankConnectionId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Currency");

                    b.HasIndex("IsActive");

                    b.HasIndex("MainFlag");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("TariffCode");

                    b.ToTable("AccountsTBank");
                });

            modelBuilder.Entity("SharedLib.BankTransferModelDB", b =>
                {
                    b.HasOne("SharedLib.BankConnectionModelDB", "BankConnection")
                        .WithMany()
                        .HasForeignKey("BankConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.CustomerBankIdModelDB", "CustomerBank")
                        .WithMany()
                        .HasForeignKey("CustomerBankId1");

                    b.Navigation("BankConnection");

                    b.Navigation("CustomerBank");
                });

            modelBuilder.Entity("SharedLib.TBankAccountModelDB", b =>
                {
                    b.HasOne("SharedLib.BankConnectionModelDB", "BankConnection")
                        .WithMany()
                        .HasForeignKey("BankConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankConnection");
                });
#pragma warning restore 612, 618
        }
    }
}
