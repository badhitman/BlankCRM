@using Microsoft.Extensions.Options
@inherits BlazorBusyComponentBaseModel

@inject IIdentityTransmission IdentityRepo;
@inject NavigationManager navManager
@inject IOptions<TelegramBotConfigModel> webConfig

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<StatusMessage Messages="@Messages" />

@if (IdentityUserId is null && !TelegramUserId.HasValue)
{
    <span class="badge rounded-pill text-bg-secondary ms-2">owned is null. error {C5FABB48-E47A-499B-894D-A0D8D9479AF6}</span>
}
else if (IsBusyProgress)
{
    <div class="spinner-border spinner-border-sm  ms-2" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <span @onclick="TelegramAccountRemoveJoin" class="badge text-bg-@(DeleteInit ? "danger" : "warning") ms-1" style="cursor:pointer;">@(DeleteInit ? "Подтвердить?" : "Отвязать Telegram")</span>
}

@code {
    [Parameter]
    public string? IdentityUserId { get; set; }

    [Parameter]
    public long? TelegramUserId { get; set; }

    List<ResultMessage> Messages = [];

    bool DeleteInit;

    async Task TelegramAccountRemoveJoin()
    {
        if (IsBusyProgress)
            return;

        if (IdentityUserId is null && !TelegramUserId.HasValue)
        {
            Messages = [new() { TypeMessage = MessagesTypesEnum.Error, Text = "owned is null. error {3A166646-E3D3-470B-8F51-073209F694E9}" }];
            return;
        }

        if (!DeleteInit)
        {
            DeleteInit = true;
            return;
        }
        await SetBusyAsync();

        ResponseBaseModel rest = TelegramUserId.HasValue
        ? await IdentityRepo.TelegramJoinAccountDeleteAsync(new() { TelegramId = TelegramUserId.Value, ClearBaseUri = webConfig.Value.ClearBaseUri ?? "https://" })
        : await IdentityRepo.TelegramAccountRemoveIdentityJoinAsync(new() { UserId = IdentityUserId!, ClearBaseUri = webConfig.Value.ClearBaseUri ?? "https://" });
        IsBusyProgress = false;
        DeleteInit = false;
        if (!rest.Success())
            Messages = rest.Messages;
        else
            navManager.ReloadPage();

        await InvokeAsync(() => { StateHasChanged(); });
    }
}