@page "/Account/Manage/GenerateRecoveryCodes"

@inject IdentityRedirectManager RedirectManager
@inject IUsersProfilesService UsersProfilesRepo

<PageTitle>Генерация кодов восстановления двухфакторной аутентификации (2FA).</PageTitle>
<StatusMessage Messages="@Messages" />
@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <h3>Генерация кодов восстановления двухфакторной аутентификации (2FA).</h3>
    <div class="alert alert-warning" role="alert">
        <p>
            <span class="glyphicon glyphicon-warning-sign"></span>
            <strong>Поместите эти коды в надежное место.</strong>
        </p>
        <p>
            Если вы потеряете свое устройство и у вас не будет кодов восстановления, вы потеряете доступ к своей учетной записи.
        </p>
        <p>
            Создание новых кодов восстановления не меняет ключи, используемые в приложениях для проверки подлинности. Если вы хотите изменить ключ
            используется в приложении для аутентификации, вам следует <a href="Account/Manage/ResetAuthenticator">сбросить ключи аутентификации.</a>
        </p>
    </div>
    <div>
        <form @formname="generate-recovery-codes" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken />
            <button class="btn btn-danger" type="submit">Генерация кодов восстановления</button>
        </form>
    </div>
}

@code {
    [Inject]
    AuthenticationStateProvider authRepo { get; set; } = default!;

    private string? message;
    private UserInfoMainModel user = default!;
    private IEnumerable<string>? recoveryCodes;

    List<ResultMessage> Messages = [];

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await authRepo.GetAuthenticationStateAsync();
        user = state.User.ReadCurrentUserInfo() ?? throw new Exception();
        
        TResponseModel<bool?> isTwoFactorEnabled = await UsersProfilesRepo.GetTwoFactorEnabledAsync();
        Messages.AddRange(isTwoFactorEnabled.Messages);
        if (!isTwoFactorEnabled.Success() || isTwoFactorEnabled.Response != true)
        {
            message = "Невозможно создать коды восстановления для пользователя, поскольку у него не включен 2FA.";
            Messages.Add(new ResultMessage() { TypeMessage = MessagesTypesEnum.Error, Text = message });
            throw new InvalidOperationException(message);
        }
    }

    private async Task OnSubmitAsync()
    {
        TResponseModel<IEnumerable<string>?> rc_res = await UsersProfilesRepo.GenerateNewTwoFactorRecoveryCodesAsync();
        Messages = rc_res.Messages;
        recoveryCodes = rc_res.Response;
        if (!rc_res.Success() || rc_res.Response is null)
        {
            message = "can`t generate new 2f recovery codes. error {C1A6164C-5082-41F4-8E12-F85DA3A2EE81}";
            Messages.Add(new() { TypeMessage = MessagesTypesEnum.Error, Text = message });
            throw new InvalidOperationException(message);
        }

        message = "Вы сгенерировали новые коды восстановления.";
        Messages.Add(new() { TypeMessage = MessagesTypesEnum.Warning, Text = message });
    }
}