@page "/Account/Manage/Telegram"
@attribute [Authorize]

@inject ITelegramTransmission TelegramRemoteRepo
@inject IUsersProfilesService UsersManageRepo
@inject NavigationManager navManager

@inherits BlazorBusyComponentBaseModel

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Telegram</PageTitle>
<h3>Telegram</h3>
<StatusMessage Messages="@Messages" />
@if (IsBusyProgress)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row">
        <p>
            Сервис TelegramBot:
            @if (string.IsNullOrWhiteSpace(telegram_username?.Username))
            {
                <text>не отвечает (или не настроен)</text>
            }
            else
            {
                <a href="https://t.me/@telegram_username.Username">&#64;@telegram_username.Username</a>
            }
        </p>
        @if (!string.IsNullOrWhiteSpace(telegram_username?.Username))
        {
            <TelegramJoinComponent TelegramBotUsername="@telegram_username.Username" />
        }
    </div>
}

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    List<ResultMessage> Messages = [];
    UserTelegramBaseModel? telegram_username;

    protected override async Task OnInitializedAsync()
    {
        await SetBusyAsync();

        TResponseModel<UserTelegramBaseModel> telegram_rest = await TelegramRemoteRepo.AboutBotAsync();
        await InvokeAsync(() =>
        {
            if (!telegram_rest.Success())
                Messages.AddRange(telegram_rest.Messages);

            telegram_username = telegram_rest.Response;
            IsBusyProgress = false;
            StateHasChanged();
        });
    }
}