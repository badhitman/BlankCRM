@using BlazorWebLib.Components.HelpDesk
@using MudBlazor
@using static SharedLib.GlobalStaticConstantsRoutes
@inherits OffersTableBaseComponent

<div class="mb-3">
    <CascadingValue Value="RubricSelectAction">
        <CascadingValue Value="RubricMetadataShadow">
            <RubricSelectorComponent @ref="ref_rubric" Title="Склад" ContextName="@Routes.WAREHOUSE_CONTROLLER_NAME" ModeSelectingRubrics="ModesSelectRubricsEnum.SelectAny" ShowDisabledRubrics="true" StartRubric="CurrentTab.WarehouseId" />
        </CascadingValue>
    </CascadingValue>
</div>
<MudTable Hover="true"
          ReadOnly="ReadOnly"
          SortLabel="@(nameof(RowOfOrderDocumentModelDB.Nomenclature.Name))"
          CanCancelEdit="true"
          Items="@CurrentTab.Rows"
          RowEditPreview="RowEditPreviewHandler"
          RowEditCommit="RowEditCommitHandler"
          CancelEditIcon="@Icons.Material.Filled.Cancel"
          CancelEditTooltip="Отменить изменение"
          CommitEditTooltip="Сохранить изменения"
          RowEditCancel="RowEditCancelHandler"
          EditTrigger="@EditTrigger">

    <ToolBarContent>
        <MudText Typo="Typo.h6">
            Номенклатура
            @{
                decimal sum_of_tab = CurrentTab.Rows!.Select(x => x.Offer!.Price * x.Quantity).Sum();
            }
            @if (sum_of_tab > 0)
            {
                <text>: </text>
                <span class="text-primary-emphasis">@sum_of_tab</span> <text>руб.</text>
            }
        </MudText>
        <MudSpacer />
        @if (!ReadOnly)
        {
            <div class="ms-3">
                <AddRowToOrderDocumentComponent ForceAdding="ForceAdding" ShowPriceOffers="_showingPriceSelectorOrder" SelectOfferHandler="SelectOfferAction" ShowRegistersOffersQuantity="true" @ref="addingDomRef" WarehouseId="CurrentTab.WarehouseId" AllOffers="allOffers" CurrentRows="CurrentTab.Rows!.Select(x=>x.OfferId).ToList()" AddingOfferHandler="AddingOfferAction" />
            </div>
        }
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width:50px;" />
        @if (EditTrigger == TableEditTrigger.EditButton)
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh>Название</MudTh>
        <MudTh>Остаток</MudTh>
        <MudTh>Цена</MudTh>
        <MudTh>Количество</MudTh>
        <MudTh>Сумма</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            <a href="/nomenclature/offer-card/@context!.Offer!.Id">
                @context.Offer.GetName()
            </a>
        </MudTd>
        @{
            IQueryable<OfferAvailabilityModelDB> _q = RegistersCache.Where(x => x.OfferId == context.OfferId && x.WarehouseId == CurrentTab.WarehouseId).AsQueryable();
            decimal _sum = !_q.Any()
            ? 0
            : _q.Sum(x => x.Quantity);
            bool warningRow = _sum < context!.Quantity;
        }
        <MudTd DataLabel="Остаток">
            @_sum @(context.Offer?.OfferUnit.DescriptionInfo())
        </MudTd>
        <MudTd DataLabel="Цена">
            @($"{context!.Offer!.Price} р/{context.Offer!.OfferUnit.DescriptionInfo().ToLower()}")
        </MudTd>
        <MudTd title="@(warningRow ? "Остатки меньше требуемого" : "")" Class="@(warningRow ? "mud-theme-warning" : "")" DataLabel="Количество">
            @context!.Quantity
        </MudTd>
        <MudTd DataLabel="Сумма">
            @(context!.Quantity * context.Offer!.Price)
        </MudTd>
        <MudTd><MudIconButton OnClick="() => DeleteRow(context.OfferId)" title="Удалить строку" Icon="@Icons.Material.Filled.Delete" aria-label="delete" Size="Size.Small" /></MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            @context?.Offer?.GetName()
        </MudTd>
        <MudTd DataLabel="Остаток">
            @(this.RegistersCache.Where(x => x.OfferId == context.OfferId && x.WarehouseId == CurrentTab.WarehouseId).Sum(x => x.Quantity))
        </MudTd>
        <MudTd DataLabel="Price">
            @(context.Offer!.Price)
        </MudTd>
        <MudTd DataLabel="Quantity">
            @{
                var _alowedValues = context.Offer?.QuantitiesValues;
            }
            @if (_alowedValues is null || _alowedValues.Count == 0 || ForceAdding)
            {
                <MudNumericField @bind-Value="context!.Quantity" Required Min="1" Max="GetMaxValue(context)" />
            }
            else
            {
                bool overLimit = false;
                <MudSelect T="decimal" Label="Количество" Required="true" @bind-Value="context!.Quantity">
                    @foreach (decimal ql in _alowedValues)
                    {
                        overLimit = overLimit || ql > GetMaxValue(context);
                        <MudSelectItem Disabled="@overLimit" Value="@ql" />
                    }
                </MudSelect>
            }
        </MudTd>
        <MudTd colspan="2">
            @(context!.Quantity * context.Offer!.Price)
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>