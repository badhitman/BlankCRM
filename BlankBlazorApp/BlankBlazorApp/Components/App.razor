@using SharedLib
@using System.Reflection

<!DOCTYPE html>
<html lang="ru" data-bs-theme="dark">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="/lib/bootstrap-icons/font/bootstrap-icons.min.css?version=@GlobalStaticConstants.InitSalt">
    <link rel="stylesheet" href="/lib/jqueryui/jquery-ui.min.css?version=@GlobalStaticConstants.InitSalt" />
    <link rel="stylesheet" href="/lib/bootstrap/css/bootstrap.min.css?version=@GlobalStaticConstants.InitSalt" />
    <link rel="stylesheet" href="/lib/highlight.js/styles/default.min.css?version=@GlobalStaticConstants.InitSalt" />
    <link rel="stylesheet" href="app.css?version=@GlobalStaticConstants.InitSalt" />
    <link rel="stylesheet" href="/js/ckeditor5/ckeditor5.css?version=@GlobalStaticConstants.InitSalt" />
    <link rel="stylesheet" href="BlankBlazorApp.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <script type="text/javascript">
        window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        triggerFileDownload(fileName, url);
        URL.revokeObjectURL(url);
        };
        window.triggerFileDownload = (fileName, url) => {
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        };
    </script>
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function()
        {
            if(window.Telegram != undefined && window.Telegram != null)
            {
                if(window.Telegram.WebApp.initData == "" || window.Telegram.WebApp.initData == undefined || window.Telegram.WebApp.initData == null)
                {
                    // console.warn(JSON.stringify(tg));
                    Blazor.start().then(function () {console.warn("Blazor started!")});
                    return;
                }
                // console.warn(JSON.stringify(window.Telegram.WebApp.initData));
                $.ajax({
                    type: 'GET',
                    url: '/authorize/ping',
                    success: function (response) {
                        console.warn(JSON.stringify(response));
                    },
                    error: function (response) {
                        console.warn(JSON.stringify(response));
                        let tg = window.Telegram.WebApp;
                        let model = {};
                        model.InitData = tg.initData;
                        if(model.InitData != undefined && model.InitData != null)
                        {
                            tg.BackButton.isVisible = false;
                            tg.BackButton.hide();
                            tg.expand();
                            tg.disableVerticalSwipes();
                            $.ajax({
                                type: 'POST',
                                url: '/telegram/authorize',
                                data: JSON.stringify(model),
                                success: function (response) {
                                    // if (response.Success) {
                                    //console.warn(JSON.stringify(response));
                                    window.location.reload();
                                    // }
                                },
                                error: function (response) {
                                    //alert(response);
                                },
                                contentType: "application/json"
                            });
                        }
                    },
                    contentType: "application/json"
                });
            }

            // console.warn(JSON.stringify(tg));
            Blazor.start().then(function () {console.warn("Blazor started!")});

            /*
            Blazor.start({ssr: { }, circuit: { }, webAssembly: { }});
            */
        });
    </script>
    <script src="/lib/jquery/jquery.min.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/lib/jqueryui/jquery-ui.min.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/js/ckeditor5/ckeditor.js?version=@GlobalStaticConstants.InitSalt"></script>
    @* <script src="/lib/ckeditor5/ckeditor.js?version=@GlobalStaticConstants.InitSalt"></script> *@
    <script src="/js/CKEditorInterop.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/lib/tinymce/tinymce.min.js"></script>
    <script src="/lib/highlight.js/highlight.min.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js?v=@(Assembly.GetAssembly(typeof(MudBlazor.AbstractLocalizationInterceptor))?.GetName().Version?.ToString())"></script>
    @* <script src="https://www.google.com/recaptcha/api.js" async defer></script> *@
    <script src="/js/scriptLoader.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/js/JsOfReCAPTCHA.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/js/site.js?version=@GlobalStaticConstants.InitSalt"></script>
    @if (_includeTelegramBotWeAppScript)
    {
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
    }
    <script>
        window.onBlazorReady = () => {
            $(document).tooltip({
                track: true
            });
        };
        window.tooltipeHide = () => {
            $("div.ui-tooltip").hide();
        };
    </script>
    <div id="components-reconnect-modal">
        Возникла проблема со связью!
        (Текущая попытка переподключения:
        <span id="components-reconnect-current-attempt"></span> /
        <span id="components-reconnect-max-retries"></span>)
    </div>
</body>
</html>