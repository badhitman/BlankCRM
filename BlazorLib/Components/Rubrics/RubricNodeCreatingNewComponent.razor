@typeparam TEntity where TEntity : RubricNodeBodyComponent

@using MudBlazor

@inherits BlazorBusyComponentBaseModel

<div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%" class="@(ItemModel?.IsDisabled == true ? "text-decoration-line-through opacity-25" : "")">
    <MudStack Row="true">
        <span class="font-monospace visually-hidden">Создать новый элемент</span>
    </MudStack>
    <div style="justify-self: end;">
        @if (ItemModel?.IsDisabled == true)
        {
            <p class="lead">
                Деактивирован.
            </p>
        }
        else
        {
            <div class="row">
                <div class="col-auto">
                    <input autocomplete="off" title="" @bind-value="rubricName" @bind-value:event="oninput" type="text" class="form-control form-control-sm@(string.IsNullOrWhiteSpace(rubricName) ? " border border-warning-subtle" : "")" placeholder="имя нового элемента">
                </div>
                <div class="col-auto">
                    <div class="btn-group btn-group-sm" role="group" aria-label="Small button group">
                        <button @onclick="RubricCreateNew" disabled="@(!IsEdit)" type="button" class="btn btn-@(IsEdit ? "primary" : "outline-secondary") btn-sm">Добавить</button>
                        @if (IsEdit)
                        {
                            <button @onclick="() => rubricName = string.Empty" title="Отменить изменение системного имени" type="button" class="btn btn-outline-info btn-sm">Отмена</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Inject]
    IRubricsTransmission RubricsRepo { get; set; } = default!;


    /// <inheritdoc/>
    [CascadingParameter, EditorRequired]
    public required RubricsManageComponent<TEntity> HelpDeskParentView { get; set; }

    /// <inheritdoc/>
    [CascadingParameter, EditorRequired]
    public required Action<int> ReloadNodeHandle { get; set; }

    /// <inheritdoc/>
    [CascadingParameter, EditorRequired]
    public required TreeItemData<UniversalBaseModel> Item { get; set; }

    /// <summary>
    /// Имя контекста
    /// </summary>
    [Parameter]
    public string? ContextName { get; set; }


    UniversalBaseModel ItemModel = default!;

    string? rubricName;

    /// <inheritdoc/>
    protected string DomID => $"rubric-create-for-{Item.Value?.ParentId}";

    bool IsEdit => !string.IsNullOrWhiteSpace(rubricName);

    async Task RubricCreateNew()
    {
        if (string.IsNullOrWhiteSpace(rubricName))
            throw new Exception();

        await SetBusyAsync();
        TResponseModel<int> rest = await RubricsRepo.RubricCreateOrUpdateAsync(new() { Name = rubricName, ParentId = ItemModel.ParentId > 0 ? ItemModel.ParentId : null, ContextName = ContextName });
        IsBusyProgress = false;
        SnackBarRepo.ShowMessagesResponse(rest.Messages);

        ReloadNodeHandle(Item.Value?.ParentId ?? 0);
    }

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        ItemModel = new UniversalLayerModel()
        {
            Name = "",
            ParentId = Item.Value?.ParentId,
            ContextName = ContextName,
        };
    }
}