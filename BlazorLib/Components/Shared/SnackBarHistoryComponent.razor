@using static BlazorLib.Extensions
<h3>Snacks history</h3>

<MudTable Items="Elements" Dense Hover Bordered Striped Filter="new Func<MessageViewModel, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Snack`s</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Text</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="d/t">
            @if (context.Points.Count == 1)
            {
                <span>@context.Points.First()</span>
            }
            else
            {
                <span>@context.Points.First() @($"x{context.Points.Count}")</span>
            }
        </MudTd>
        <MudTd DataLabel="Type">@context.Message.TypeMessage</MudTd>
        <MudTd DataLabel="Text">@context.Message.Text</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
@code {
    /// <summary>
    /// SnackBar
    /// </summary>
    [Inject]
    public ISnackbar SnackBarRepo { get; set; } = default!;

    private string searchString1 = "";
    private MessageViewModel? selectedItem1 = null;
    private HashSet<MessageViewModel> selectedItems = new HashSet<MessageViewModel>();

    private IEnumerable<MessageViewModel> Elements = [];

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        Elements = SnackBarRepo.GetHistoryMessages();
    }

    private bool FilterFunc1(MessageViewModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(MessageViewModel element, string searchString)
    {
        return element.Message.Text?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true;
    }
}