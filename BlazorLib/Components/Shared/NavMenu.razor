@implements IDisposable

@inject IParametersStorageTransmission StoreRepo
@inject NavigationManager NavigationManager
@inject ISnackbar SnackbarRepo

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">@_textValue</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" id="main-nav-dom" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('#main-nav-dom').click()">
    <nav class="flex-column">
        <NavMainMenuComponent NavMenuItems="NavMainMenu.NavMenuItems" />        
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link px-3" href="Account/Manage">
                        <span aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link px-2">
                            <span aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link px-3" href="Account/Register">
                        <span aria-hidden="true"></span> Registration
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link px-3" href="Account/Login">
                        <span aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    [CascadingParameter, EditorRequired]
    public required NavMainMenuModel NavMainMenu { get; set; }

    private string? currentUrl;
    string _textValue = "App";


    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        TResponseModel<string?> res = await StoreRepo.ReadParameterAsync<string?>(GlobalStaticCloudStorageMetadata.TitleMain);
        SnackbarRepo.ShowMessagesResponse(res.Messages);
        _textValue = res.Response ?? "App";
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}