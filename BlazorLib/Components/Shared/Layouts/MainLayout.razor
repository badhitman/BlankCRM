@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" @rendermode="new InteractiveServerRenderMode(prerender: false)" />
<MudDialogProvider @rendermode="new InteractiveServerRenderMode(prerender: false)" />
<MudSnackbarProvider @rendermode="new InteractiveServerRenderMode(prerender: false)" />
<MudPopoverProvider @rendermode="new InteractiveServerRenderMode(prerender: false)" />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <CultureSelector />
            @if (NavMainMenu.TopNavMenuItems?.Any() == true)
            {
                foreach (NavItemModel nav_item in NavMainMenu.TopNavMenuItems)
                {
                    <a href="@nav_item.HrefNav" target="_blank" class="@nav_item.CssClass px-1" title="@nav_item.Tooltip">@nav_item.Title</a>
                }
            }
            <a href="@GetRootDomain()" title="Документация" target="_blank" class="@(user?.IsAdmin == true ? "" : "visually-hidden")">API</a>
        </div>
        <article class="content px-2">
            @Body
        </article>
    </main>
    @if (NavMainMenu.BottomNavMenuItems?.Any() == true)
    {
        <nav class="navbar fixed-bottom bg-body-tertiary">
            <div class="container-fluid">
                <NavMainMenuComponent NavMenuItems="NavMainMenu.BottomNavMenuItems" />
            </div>
        </nav>
    }
</div>

<div id="blazor-error-ui">
    An unhandled error occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [Inject]
    NavigationManager NavRepo { get; set; } = default!;

    [Inject]
    AuthenticationStateProvider authRepo { get; set; } = default!;


    [CascadingParameter, EditorRequired]
    public required NavMainMenuModel NavMainMenu { get; set; }


    UserInfoMainModel? user = default!;
    private bool _isDarkMode = true;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await authRepo.GetAuthenticationStateAsync();
        user = state.User.ReadCurrentUserInfo();
    }

    string GetRootDomain()
    {
        Uri _uri = new(NavRepo.BaseUri);
        return $"{_uri.Scheme}://api.{_uri.Authority}/swagger/";
    }
}