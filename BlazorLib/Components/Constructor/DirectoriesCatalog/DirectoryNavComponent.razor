@using System.ComponentModel.DataAnnotations
@inherits BlazorBusyComponentBaseAuthModel

@if (IsBusyProgress)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate Class="my-7" />
}
else
{
    if (!ModesForHideSelector.Contains(DirectoryNavState))
    {
        <div class="input-group me-4">
            <span class="input-group-text">Справочник</span>
            <select disabled="@(allDirectories.Any() != true )" @bind="SelectedDirectoryId" class="form-select" aria-label="reference/list">
                @if (allDirectories.Any() != true)
                {
                    <option value="-1" selected>There are no reference books</option>
                }
                else
                {
                    foreach (EntryModel el in allDirectories)
                    {
                        <option value="@el.Id">@el.Name</option>
                    }
                }
            </select>
            @if (ParentFormsPage.CanEditProject)
            {
                @if (SelectedDirectoryId > 0)
                {
                    <button type="button" class="btn btn-outline-secondary bi bi-pen-fill" @onclick="InitRenameDirectory" title="Edit the selected directory"></button>
                    <button type="button" class="btn btn-outline-secondary bi bi-trash-fill" @onclick="() => { DirectoryNavState = DirectoryNavStatesEnum.Delete; }" title="Deleting the selected directory along with its elements"></button>
                }
                <button type="button" class="btn btn-outline-secondary bi bi-plus-square-fill" @onclick="() => { Description = default; DirectoryNavState = DirectoryNavStatesEnum.Create; }" title="Create a new directory"></button>
            }
        </div>
    }

    @if (DirectoryNavState == DirectoryNavStatesEnum.Create)
    {
        ValidateReportModel ValidateReport = GlobalTools.ValidateObject(directoryObject);
        <div class="vstack gap-3">
            <div class="input-group">
                <span class="input-group-text">new directory/list:</span>
                <input @bind-value="directoryObject.Name" @bind-value:event="oninput" type="text" class="form-control" size="100" placeholder="Directory name" disabled="@IsBusyProgress">
                <button disabled="@( !ValidateReport.IsValid)" @onclick="CreateDirectory" class="btn btn-outline-success" type="button">@GetTitleForButtonCreate</button>
                <button @onclick="CancelCreatingDirectory" class="btn btn-outline-secondary" type="button">Отмена</button>
            </div>
            <TinyMCE.Blazor.Editor @bind-Value="@Description" ScriptSrc="@GlobalStaticConstants.TinyMCEditorScriptSrc" Conf="@editorConf" />
        </div>
        @if (!string.IsNullOrEmpty(directoryObject.Name) && !ValidateReport.IsValid)
        {
            <div class="alert alert-warning mt-3" role="alert">
                @foreach (ValidationResult re in ValidateReport.ValidationResults)
                {
                    <i>@re.ErrorMessage</i>
                }
            </div>
        }
    }
    else if (DirectoryNavState == DirectoryNavStatesEnum.Rename)
    {
        <div class="input-group pb-1">
            <span class="input-group-text">editing directory/list:</span>
            <input @bind-value="directoryObject.Name" @bind-value:event="oninput" type="text" class="form-control" size="100" placeholder="Directory name" disabled="@IsBusyProgress">
            <button @onclick="SaveRenameDirectory" disabled="@( !GlobalTools.ValidateObject(directoryObject).IsValid)" class="btn btn-outline-secondary" type="button">Save</button>
            <button @onclick="() => ResetNavForm()" class="btn btn-outline-secondary" type="button">Cancel</button>
        </div>
        <InputRichTextComponent @bind-Value="Description" @ref="_currentTemplateInputRichText_ref" />
    }
    else if (DirectoryNavState == DirectoryNavStatesEnum.Delete)
    {
        <div class="input-group me-4">
            <span class="input-group-text">Directory</span>
            <input disabled type="text" value="@allDirectories.First(x=> x.Id == SelectedDirectoryId).Name" class="form-control">
            <button @onclick="DeleteSelectedDirectory" class="btn btn-outline-danger" type="button">Confirm deletion</button>
            <button @onclick="() => { DirectoryNavState = DirectoryNavStatesEnum.None; }" class="btn btn-outline-secondary" type="button">Cancel</button>
        </div>
    }
}