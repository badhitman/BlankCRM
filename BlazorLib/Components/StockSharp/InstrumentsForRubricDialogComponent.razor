@inherits BlazorBusyComponentBaseModel

<MudDialog>
    <DialogContent>
        <MudText HtmlTag="span">Item: @_selectedItemText</MudText>
        <MudText>Selected items (@selectedItems?.Count): @(selectedItems == null ? "" : string.Join(", ", selectedItems.Select(x => x.IdRemote).Order()))</MudText>

        <MudTable @ref="_table"
                  Loading="IsBusyProgress"
                  T="InstrumentTradeStockSharpViewModel"
                  ServerData="ServerReload"
                  MultiSelection
                  SelectionChangeable
                  Hover
                  @bind-SelectedItems="selectedItems"
                  OnRowClick="@OnRowClick"
                  SelectOnRowClick>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>ID</MudTh>
                <MudTh>Board</MudTh>
                <MudTh>Currency</MudTh>
                <MudTh>Type</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="ID">@context.IdRemote</MudTd>
                <MudTd DataLabel="Board">@context.Board</MudTd>
                <MudTd DataLabel="Currency">@context.Currency</MudTd>
                <MudTd DataLabel="Type">@context.TypeInstrument</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
            <FooterContent>
                <MudTd colspan="5">Select All</MudTd>
            </FooterContent>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject]
    IDataStockSharpService SsRepo { get; set; } = default!;


    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter, EditorRequired]
    public required List<InstrumentTradeStockSharpViewModel> Instruments { get; set; }

    [Parameter, EditorRequired]
    public required Action OnRowClickHandle { get; set; }


    private HashSet<InstrumentTradeStockSharpViewModel> selectedItems = new HashSet<InstrumentTradeStockSharpViewModel>();

    private MudTable<InstrumentTradeStockSharpViewModel>? _table;
    private string _selectedItemText = "No row clicked";
    private async Task<TableData<InstrumentTradeStockSharpViewModel>> ServerReload(TableState state, CancellationToken token)
    {
        InstrumentsRequestModel req = new()
        {
            PageNum = state.Page,
            PageSize = state.PageSize,
            SortingDirection = state.SortDirection == SortDirection.Ascending ? DirectionsEnum.Up : DirectionsEnum.Down,
        };
        await SetBusyAsync(token: token);
        TPaginationResponseModel<InstrumentTradeStockSharpViewModel> res = await SsRepo.InstrumentsSelectAsync(req, token);
        await SetBusyAsync(false, token: token);
        return new TableData<InstrumentTradeStockSharpViewModel>() { TotalItems = res.TotalRowsCount, Items = res.Response };
    }
    void OnRowClick(TableRowClickEventArgs<InstrumentTradeStockSharpViewModel> args)
    {
        _selectedItemText = $"{args.Item?.Name} ({args.Item?.IdRemote})";
        OnRowClickHandle();
    }

    private void Cancel() => MudDialog.Cancel();

    private void DeleteServer()
    {
        MudDialog.Close(DialogResult.Ok(Instruments));
    }
}